Overview of how a ASCII-art is generated by this program:

Program (ASCII.py) consists of class ASCII and two function for processing input. Every function has a short comment describing
her inner working right after its declaration. Rest of this file will attempt to describe the general algorithm used,
rather than focus on particular functions.

There are two other .py files: Utilities.py, Preparation.py. These were used to create Characters directory etc.,
however are not in actively part of the program itself.

Picture is taken and slightly enlarged to allow us to cut it into slices of similar dimensions. Every "slice" will
be represented by a single character from Characters directory. Then the grayscale tone is calculated for each of our
slices and these are used to find a best fitting tone from our library (currently working with fractions x/35 from [0,1]).
After finding fit for the first slice (left to right, top to bottom). We push the inaccuracy - difference between fit
from our library and the tone of a slice onto others
(Floyd-Steinberg dithering: https://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering)

Given the nature of characters we use (usually consist of lines), there are not many that fill almost the entire area,
thus if the average tone of the picture is below 128, the background of ASCII-art turns black and characters white.
Default is black on white.

Additionally, the user can input colours that replace grayscale spectrum by replacing white and black colours.
